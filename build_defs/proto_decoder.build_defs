go_file = """package main

import (
	"bufio"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/jessevdk/go-flags"

	pbpkg "$PROTO_IMPORT"
)

type Opts struct {
	EnumsAsInts  bool   `short:"e" long:"enums" description:"Whether to render enum values as integers, as opposed to string values"`
	EmitDefaults bool   `short:"d" long:"defaults" description:"Whether to render fields with zero values"`
	Indent       string `short:"i" long:"indent" description:"A string to indent each level by"`
	OrigName     bool   `short:"o" long:"original" description:"Whether to use the original (.proto) name for fields"`
}

func main() {
	opts := &Opts{}
	if _, err := flags.Parse(opts); err != nil {
		panic(err)
	}

	marshaller := &jsonpb.Marshaler{
		EnumsAsInts:  opts.EnumsAsInts,
		EmitDefaults: opts.EmitDefaults,
		OrigName:     opts.OrigName,
		Indent:       opts.Indent,
	}

	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		msg := scanner.Bytes()
		pb := &pbpkg.$PROTO_MESSAGE{}
		if err := proto.Unmarshal(msg, pb); err != nil {
			panic(err)
		}
		marshaller.Marshal(os.Stdout, pb)
	}
}
"""

def proto_decoder(name:str, args:list, proto_target:str, message:str, visibility:list=None):
    args_string = ' '.join(args)

    go_proto_import = CONFIG.GO_IMPORT_PATH + canonicalise(proto_target)[1:].replace(':', '/')

    go_src_name = '_%s#decoder_src' % name

    cmd = [
        'set -x',
        'touch $OUT',
    ]
    for line in go_file.split('\n'):
        cmd.append(
            "sed -e 's:$PROTO_IMPORT:%s:g' -e 's:$PROTO_MESSAGE:%s:g' <<< '%s' >> $OUT" % (
                go_proto_import, message, line
            )
        )

    go_src_rule = genrule(
        name = go_src_name,
        outs = [name + '.go'],
        cmd = cmd,
    )

    go_binary(
        name = name,
        srcs = [go_src_rule],
        deps = [
            proto_target,
            '//third_party/go:flags',
            '//third_party/go:jsonpb',
            '//third_party/go:protobuf',
        ],
        visibility = visibility,
    )

